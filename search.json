[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"project companion Richard McElreath’s Statistical Rethinking (McElreath, 2020). 10 weeks, course (materials provided ), work exercises chapter covered week. Like Solomon Kurz, take {tidyverse} (Wickham et al., 2019; Wickham, 2021) {brms} (Bürkner, 2017, 2018, 2021) approach solving problems. translation actual book text {tidyverse} {brms} style code, please check project, Statistical rethinking brms, ggplot2, tidyverse: Second edition.can purchase Statistical Rethinking: Bayesian Course R Stan (McElreath, 2020) CRC Press.","code":""},{"path":"index.html","id":"disclaimer","chapter":"Welcome","heading":"Disclaimer","text":"project work progress. ’d like follow along, can find GitHub repository . solutions checked anybody, undoubtedly errors. find , please contribute let know!several ways contribute. simple edits suggestions, can use edit button navigation bar top screen. can also create fork repository submit pull request open issue.Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"index.html","id":"license","chapter":"Welcome","heading":"License","text":"project licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"bayesian-inference.html","id":"bayesian-inference","chapter":"Week 1: Bayesian Inference","heading":"Week 1: Bayesian Inference","text":"first week covers Chapter 1 (Golem Prague), Chapter 2 (Small Worlds Large Worlds), Chapter 3 (Sampling Imaginary).","code":""},{"path":"bayesian-inference.html","id":"lectures","chapter":"Week 1: Bayesian Inference","heading":"1.1 Lectures","text":"Lecture 1:Lecture 2:","code":""},{"path":"bayesian-inference.html","id":"exercises","chapter":"Week 1: Bayesian Inference","heading":"1.2 Exercises","text":"","code":""},{"path":"bayesian-inference.html","id":"chapter-1","chapter":"Week 1: Bayesian Inference","heading":"1.2.1 Chapter 1","text":"exercises Chapter 1.","code":""},{"path":"bayesian-inference.html","id":"chapter-2","chapter":"Week 1: Bayesian Inference","heading":"1.2.2 Chapter 2","text":"2E1. expressions correspond statement: probability rain Monday?\n(1) Pr(rain)\n(2) Pr(rain|Monday)\n(3) Pr(Monday|rain)\n(4) Pr(rain, Monday) / Pr(Monday)take question mean probability rain given Monday. means (2) (4) correct.2E2. following statements corresponds expression: Pr(Monday|rain)?\n(1) probability rain Monday.\n(2) probability rain, given Monday.\n(3) probability Monday, given raining.\n(4) probability Monday raining.answer (3) corresponds expression Pr(Monday|rain).2E3. following expressions correspond statement: probability Monday, given raining?\n(1) Pr(Monday|rain)\n(2) Pr(rain|Monday)\n(3) Pr(rain|Monday) Pr(Monday)\n(4) Pr(rain|Monday) Pr(Monday) / Pr(rain)\n(5) Pr(Monday|rain) Pr(rain) / Pr(Monday)two correct answers. Answer option (1) standard notation conditional probability. Answer option (4) equivalent, Bayes’ Theorem.2E4. Bayesian statistician Bruno de Finetti (1906–1985) began 1973 book probability theory dedication: “PROBABILITY EXIST.” capitals appeared original, imagine de Finetti wanted us shout statement. meant probability device describing uncertainty perspective observer limited knowledge; objective reality. Discuss globe tossing example chapter, light statement. mean say “probability water 0.7”?idea probability subjective perception likelihood something happen. globe tossing example, result always either “land” “water” (.e., 0 1). toss globe, don’t know result , know always “land” “water.” express uncertainty outcome, use probability. know water likely land, may say probability “water” 0.7; however, ’ll never actually observe result 0.7 waters, observe probability. ever observe two results “land” “water.”2M1. Recall globe tossing model chapter. Compute plot grid approximate posterior distribution following sets observations. case, assume uniform prior p.2M2. Now assume prior p equal zero p < 0.5 positive constant p ≥ 0.5. compute plot grid approximate posterior distribution sets observations problem just .problem can use code , just altering prior defined.2M3. Suppose two globes, one Earth one Mars. Earth globe 70% covered water. Mars globe 100% land. suppose one globes—don’t know —tossed air produced “land” observatiion. Assume globe equally likely tossed. Show posterior probability globe Earth, conditional seeing “land” (Pr(Earth|land)), 0.23.2M4. Suppose deck three cards. card two sides, side either black white. One card two black sides. second card one black one white side. third card two white sides. Now suppose three cards placed bag shuffled. Someone reaches bag pulls card places flat table. black side shown facing , don’t know color side facing . Show probability side also black 2/3. Use counting method (Section 2 chapter) approach problem. means counting ways card produce observed data (black side faceing table).2M5. Now suppose four cards: B/B, B/W, W/W, another B/B. suppose card drawn bag black side appears face . calculate probability side black.2M6. Imagine black ink heavy, cards black sides heavier cards white sides. result, ’s less likely card black sides pulled bag. assume three cards: B/B, B/W, W/W. experimenting number times, conclude every way pull B/B card bag, 2 ways pull B/W card 3 ways pull W/W card. suppose card pulled black side appears face . Show probability side black now 0.5. Use counting method, .2M7. Assume original card problem, single card showing black side face . looking side, draw another card bag lay face table. face shown new card white. Show probability first card, one showing black side, black side now 0.75. Use counting method, can. Hint: Treat like sequence globe tosses, countng ways see observation, possiible first card.2H1. Suppose two species panda bear. equally common wild live sample places. look exactly alike eat food, yet genetic assay capable telling apart. differ however family sizes. Species gives birth twins 10% time, otherwise birthing single infant. Species births twins 20% time, ottherwise birthing singleton infants. Assume numbers known certainty, many years field research.\nNow suppose managing captive panda breeding program. newe female panda unknown species, just given birth twins. probability next birth also twins?2H2. Recall facts problem . Now compute probability panda species , asssuming observed first birth twins.2H3. Continuing previous problem, suppose panda mother second birth twins, singleton infant. Compute posterior probability panda species .2H4. common boast Bayesian statisticians Bayesian inference makes easy use data, even data different types.\nsuppose now veterinarian comes along new genetic test claims can identify species mother panda. test, like tests, imperfect. information test:probability correctly identifies species panda 0.8.probability correctly identifies species B panda 0.65.vet administers test panda tells test positive species . First ignore previous information births compute posterior probability panda species . redo calculation, now using birth data well.","code":"\nlibrary(tidyverse)\n\ndist <- tibble(p_grid = seq(from = 0, to = 1, length.out = 20),\n               prior = rep(1, times = 20)) %>%\n  mutate(likelihood_1 = dbinom(3, size = 3, prob = p_grid),\n         likelihood_2 = dbinom(3, size = 4, prob = p_grid),\n         likelihood_3 = dbinom(5, size = 7, prob = p_grid),\n         across(starts_with(\"likelihood\"), ~ .x * prior),\n         across(starts_with(\"likelihood\"), ~ .x / sum(.x))) %>%\n  pivot_longer(cols = starts_with(\"likelihood\"), names_to = \"pattern\",\n               values_to = \"posterior\") %>%\n  separate(pattern, c(NA, \"pattern\"), sep = \"_\", convert = TRUE) %>%\n  mutate(obs = case_when(pattern == 1L ~ \"W, W, W\",\n                         pattern == 2L ~ \"W, W, W, L\",\n                         pattern == 3L ~ \"L, W, W, L, W, W, W\"))\n\nggplot(dist, aes(x = p_grid, y = posterior)) +\n  facet_wrap(vars(fct_inorder(obs)), nrow = 1) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")\ndist <- tibble(p_grid = seq(from = 0, to = 1, length.out = 20)) %>%\n  mutate(prior = case_when(p_grid < 0.5 ~ 0L,\n                           TRUE ~ 1L),\n         likelihood_1 = dbinom(3, size = 3, prob = p_grid),\n         likelihood_2 = dbinom(3, size = 4, prob = p_grid),\n         likelihood_3 = dbinom(5, size = 7, prob = p_grid),\n         across(starts_with(\"likelihood\"), ~ .x * prior),\n         across(starts_with(\"likelihood\"), ~ .x / sum(.x))) %>%\n  pivot_longer(cols = starts_with(\"likelihood\"), names_to = \"pattern\",\n               values_to = \"posterior\") %>%\n  separate(pattern, c(NA, \"pattern\"), sep = \"_\", convert = TRUE) %>%\n  mutate(obs = case_when(pattern == 1L ~ \"W, W, W\",\n                         pattern == 2L ~ \"W, W, W, L\",\n                         pattern == 3L ~ \"L, W, W, L, W, W, W\"))\n\nggplot(dist, aes(x = p_grid, y = posterior)) +\n  facet_wrap(vars(fct_inorder(obs)), nrow = 1) +\n  geom_line() +\n  geom_point() +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")\n# probability of land, given Earth\np_le <- 0.3\n\n# probability of land, given Mars\np_lm <- 1.0\n\n# probability of Earth\np_e <- 0.5\n\n# probability of land\np_l <- (p_e * p_le) + ((1 - p_e) * p_lm)\n\n# probability of Earth, given land (using Bayes' Theorem)\np_el <- (p_le * p_e) / p_l\np_el\n#> [1] 0.231\ncard_bb_likelihood <- 2\ncard_bw_likelihood <- 1\ncard_ww_likelihood <- 0\n\nlikelihood <- c(card_bb_likelihood, card_bw_likelihood, card_ww_likelihood)\nprior <- c(1, 1, 1)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]\n#> [1] 0.667\ncard_bb_likelihood <- 2\ncard_bw_likelihood <- 1\ncard_ww_likelihood <- 0\n\nlikelihood <- c(card_bb_likelihood, card_bw_likelihood, card_ww_likelihood,\n                card_bb_likelihood)\nprior <- c(1, 1, 1, 1)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nposterior[1] + posterior[4]\n#> [1] 0.8\ncard_bb_likelihood <- 2\ncard_bw_likelihood <- 1\ncard_ww_likelihood <- 0\n\nlikelihood <- c(card_bb_likelihood, card_bw_likelihood, card_ww_likelihood)\nprior <- c(1, 2, 3)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]\n#> [1] 0.5\n# 2 choices for first card, with 3 options for second card: 2 W/W + 1 W/B\ncard_bb_likelihood <- 2 * 3 \ncard_wb_likelihood <- 1 * 2 \ncard_ww_likelihood <- 0\n\nlikelihood <- c(card_bb_likelihood, card_wb_likelihood, card_ww_likelihood)\nprior <- c(1,1,1)\nposterior <- prior * likelihood\nposterior <- posterior / sum(posterior)\n\nposterior[1]\n#> [1] 0.75\n# After first birth, likelihood of species A and B is equal to the rate the\n# species give birth to twins\na_likelihood <- 0.1\nb_likelihood <- 0.2\n\n# Next calculate the posterior probability that the panda belongs to each\n# species, assume species are equally likely\nlikelihood <- c(a_likelihood, b_likelihood)\nprior <- c(1, 1) \nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\nposterior\n#> [1] 0.333 0.667\n\n# The probability the next birth is twins is the probability the panda belongs\n# to each species times the likelihood each species gives birth to twins\n(posterior[1] * a_likelihood) + (posterior[2] * b_likelihood)\n#> [1] 0.167\n# probability of species A\np_a <- 0.5\n\n# probability of twins, given species A\np_ta <- 0.1\n\n# probability of twins, given species B\np_tb <- 0.2\n\n# probability of twins\np_t <- (p_a * p_ta) + ((1 - p_a) * p_tb)\n\n# probability of species A, given twins (using Bayes' Theorem)\n# (note this is equivalent to `posterior[1]` above)\np_at <- (p_ta * p_a) / p_t\np_at\n#> [1] 0.333\n# likelihood for each species is Pr(twins) * Pr(singleton)\na_likelihood <- 0.1 * (1 - 0.1)\nb_likelihood <- 0.2 * (1 - 0.2)\n\n# compute posterior probabilities\nlikelihood <- c(a_likelihood, b_likelihood)\nprior <- c(1, 1)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]\n#> [1] 0.36\n# use Bayes' Theorem to determine the probability of species A, given a positive\n# test\np_ap <- (0.8 * 0.5) / ((0.5 * 0.8) + (0.5 * 0.35))\np_ap\n#> [1] 0.696\n\n\n# Now include test data with observed births\n# likelihood for each species is Pr(twins) * Pr(singleton)\na_likelihood <- 0.1 * (1 - 0.1)\nb_likelihood <- 0.2 * (1 - 0.2)\n\n# compute posterior probabilities, using test result as prior\nlikelihood <- c(a_likelihood, b_likelihood)\nprior <- c(p_ap, (1 - p_ap))\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nposterior[1]\n#> [1] 0.563"},{"path":"bayesian-inference.html","id":"chapter-3","chapter":"Week 1: Bayesian Inference","heading":"1.2.3 Chapter 3","text":"Easy. Easy problems use sample posterior distribution globe tossing example. code give specific set samples, can check answers exactly.Use values samples answer questions follow.3E1. much posterior probability lies p = 0.2?3E2. much posterior probability lies p = 0.8?3E3. much posterior probability lies p = 0.2 p = 0.8?3E4. 20% posterior probability lies value p?3E5. 20% posterior probability lies value p?3E6. values p contain narrowest interval equal 66% posterior probability?3E7. values p contain 66% posterior probability, assuming equal posterior probability interval?3M1. Suppose globe tossing data turned 8 water 15 tosses. Constructe posterior distribution, using grid approximation. Use flat prior .3M2. Draw 10,000 samples grid approximation . use sample calculate 90% HPDI p.3M3. Construct posterior predictive check model data. means simulate distribution samples, averaging posterior uncertainty p. probability observing 8 water 15 tosses?3M4. Using posterior distribution constructed new (8/15) data, now calculate probability observing 6 water 9 tosses.3M5. Start 3M1, now use prior zero p = 0.5 constant p = 0.5. corresponds prior information majority Earth’s surface water. Repeat problem compare inferences (using priors) true value p = 0.7.HPDI 3M2 much narrower new prior ([.501, .711] vs. [.334, 0.722]). Additionally, probabilities observing 8 15 6 9 increased, value p < 0.5 longer taking posterior density. Thus model new prior giving us better information.3M6. Suppose want estimate Earth’s proportion water precisely. Specifically, want 99% percentile interval posterior distribution p 0.05 wide. means distance upper lower bound interval 0.05. many times toss globe ?figure shows average interval width 100 simulations given number tosses. , true proportion p 0.7 toss globe 1,000 times, average interval width approximately 0.074. get interval width .05 smaller, need around 2,300 tosses.Hard. Hard problems use data . data indicate gender (male = 1, female = 0) officially reported first second born children 100 two-child families. example, first family data reported boy (1) girl (0). second family reported girl (0) boy (1). third family reported two girls. can load tow vectors R’s memory typing:Use vectors data. example compute total number boys born across births, use:3H1. Using grid approximation, compute posterior distribution probability birth boy. Assume uniform prior probability. parameter value maximizes posterior probability?3H2. Using sample function, draw 10,000 random parameter values posterior distribution calculated . Use sample estimate 50%, 89%, 97% highest posterior density intervals.3H3. Use rbinom simulate 10,000 replicates 200 births. end 10,000 numbers, one count boys 200 births. Compare distribution predicted numbers boys actual count data (111 boys 200 births). many good ways visualize simulations, dens command (part rethinking package) prbably easiest way case. look like model fits data well? , distribution predictions include actual observation central, likely outcome?Based posterior predictive distribution, model appears fit well, observed value 111 middle distribution.3H4. Now compare 10,000 counts boys 100 simulated first borns number boys first births, birth1. model look light?Based first births , model appears fit less well. Specifically, model appears overestimating number first births boys. However, appear large discrepancy, observed value still within middle 66% interval.3H5. model assumes sex first second births independent. check assumption, focus now second births followed female first borns. Compare 10,000 simulated conts boys second births followed girls. correctly, need count number first borns firls simulate many births, 10,000 times. Compare counts boys simulations actual observed count boys following girls. model look light? guesses going data?model severely estimating number second-born boys first born child girl. Thus, assumption births independent appears violated.","code":"\np_grid <- seq(from = 0, to = 1, length.out = 1000)\nprior <- rep(1, 1000)\nlikelihood <- dbinom(6, size = 9, prob = p_grid)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\nset.seed(100)\nsamples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\nmean(samples < 0.2)\n#> [1] 4e-04\nmean(samples > 0.8)\n#> [1] 0.112\nlibrary(tidyverse)\nmean(between(samples, 0.2, 0.8))\n#> [1] 0.888\nquantile(samples, probs = 0.2)\n#>   20% \n#> 0.519\nquantile(samples, probs = 0.8)\n#>   80% \n#> 0.756\nlibrary(rethinking)\nHPDI(samples, prob = 0.66)\n#> |0.66 0.66| \n#> 0.509 0.774\nPI(samples, prob = 0.66)\n#>   17%   83% \n#> 0.503 0.770\np_grid <- seq(from = 0, to = 1, length.out = 1000)\nprior <- rep(1, 1000)\nlikelihood <- dbinom(8, size = 15, prob = p_grid)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\ntibble(p = p_grid, posterior = posterior) %>%\n  ggplot(aes(x = p, y = posterior)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")\nset.seed(101)\nsamples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\n\nHPDI(samples, prob = 0.9)\n#>  |0.9  0.9| \n#> 0.334 0.722\nw <- rbinom(1e4, size = 15, prob = samples)\nmean(w == 8)\n#> [1] 0.15\nw <- rbinom(1e4, size = 9, prob = samples)\nmean(w == 6)\n#> [1] 0.171\n# 3M5.1\np_grid <- seq(from = 0, to = 1, length.out = 1000)\nprior <- case_when(p_grid < 0.5 ~ 0L,\n                   TRUE ~ 1L)\nlikelihood <- dbinom(8, size = 15, prob = p_grid)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\ntibble(p = p_grid, posterior = posterior) %>%\n  ggplot(aes(x = p, y = posterior)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Proportion Water (p)\", y = \"Posterior Density\")\n# 3M5.2\nset.seed(101)\nsamples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\nHPDI(samples, prob = 0.9)\n#>  |0.9  0.9| \n#> 0.501 0.711\n\n# 3M5.3\nw <- rbinom(1e4, size = 15, prob = samples)\nmean(w == 8)\n#> [1] 0.161\n\n# 3M5.4\nw <- rbinom(1e4, size = 9, prob = samples)\nmean(w == 6)\n#> [1] 0.236\nsingle_sim <- function(tosses, prior_type = c(\"uniform\", \"step\")) {\n  prior_type <- match.arg(prior_type)\n  obs <- rbinom(1, size = tosses, prob = 0.7)\n  \n  p_grid <- seq(from = 0, to = 1, length.out = 1000)\n  prior <- rep(1, 1000)\n  if (prior_type == \"step\") prior[1:500] <- 0\n  \n  likelihood <- dbinom(obs, size = tosses, prob = p_grid)\n  posterior <- likelihood * prior\n  posterior <- posterior / sum(posterior)\n  \n  samples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\n  interval <- PI(samples, prob = 0.99)\n  width <- interval[2] - interval[1]\n}\nsingle_cond <- function(tosses, prior_type, reps = 100) {\n  tibble(tosses = tosses,\n         prior_type = prior_type,\n         width = map_dbl(seq_len(reps), ~single_sim(tosses = tosses,\n                                                    prior_type = prior_type)))\n}\n\nsimulation <- crossing(tosses = seq(1000, 5000, by = 100),\n                       prior_type = c(\"uniform\", \"step\")) %>%\n  pmap_dfr(single_cond, reps = 100) %>%\n  group_by(tosses, prior_type) %>%\n  summarize(avg_width = mean(width), .groups = \"drop\") %>%\n  mutate(prior_type = case_when(prior_type == \"uniform\" ~ \"Uniform Prior\",\n                                prior_type == \"step\" ~ \"Step Prior\"),\n         prior_type = factor(prior_type, levels = c(\"Uniform Prior\",\n                                                    \"Step Prior\")))\n\nggplot(simulation, aes(x = tosses, y = avg_width)) +\n  facet_wrap(~prior_type, nrow = 1) +\n  geom_point() +\n  geom_line() +\n  scale_x_comma() +\n  labs(x = \"Tosses\", y = \"Average Interval Width\") +\n  theme(panel.spacing.x = unit(2, \"lines\"))\ndata(homeworkch3)\nbirth1\n#>   [1] 1 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 0 1 1\n#>  [38] 1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 1 1\n#>  [75] 1 0 1 0 1 1 1 1 1 0 0 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1\nbirth2\n#>   [1] 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 0 1 0 0\n#>  [38] 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 0 0\n#>  [75] 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0\nsum(birth1) + sum(birth2)\n#> [1] 111\np_grid <- seq(from = 0, to = 1, length.out = 1000)\nprior <- rep(1, 1000)\n\nboys <- sum(birth1) + sum(birth2)\ntotal <- length(birth1) + length(birth2)\nlikelihood <- dbinom(boys, size = total, prob = p_grid)\nposterior <- likelihood * prior\nposterior <- posterior / sum(posterior)\n\ntibble(p = p_grid, posterior = posterior) %>%\n  ggplot(aes(x = p, y = posterior)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Proportion Boys (p)\", y = \"Posterior Density\")\n\np_grid[which.max(posterior)]\n#> [1] 0.555\nsamples <- sample(p_grid, prob = posterior, size = 1e4, replace = TRUE)\nHPDI(samples, prob = c(0.50, 0.89, 0.97))\n#> |0.97 |0.89  |0.5  0.5| 0.89| 0.97| \n#> 0.474 0.496 0.531 0.578 0.609 0.628\nlibrary(tidybayes)\nbreak_func <- function(x) {\n  length(seq(min(x), max(x), by = 1)) + 1\n}\n\nset.seed(300)\nb <- rbinom(1e4, size = 200, prob = samples)\n\nggplot() +\n  stat_histinterval(aes(x = b), .width = c(0.66, 0.89), breaks = break_func) +\n  geom_vline(aes(xintercept = boys), linetype = \"dashed\", color = \"red\") +\n  labs(x = \"Number of Boys\", y = \"Density\")\nset.seed(301)\nb <- rbinom(1e4, size = 100, prob = samples)\n\n\nggplot() +\n  stat_histinterval(aes(x = b), .width = c(0.66, 0.89), breaks = break_func) +\n  geom_vline(aes(xintercept = sum(birth1)), linetype = \"dashed\",\n             color = \"red\") +\n  labs(x = \"Number of Boys\", y = \"Density\")\nfb_girls <- length(birth1) - sum(birth1)\n\nset.seed(302)\nb <- rbinom(1e4, size = fb_girls, prob = samples)\n\nobs_bfg <- sum(birth2[which(birth1 == 0)])\n\nggplot() +\n  stat_histinterval(aes(x = b), .width = c(0.66, 0.89), breaks = break_func) +\n  geom_vline(aes(xintercept = obs_bfg), linetype = \"dashed\",\n             color = \"red\") +\n  labs(x = \"Number of Boys\", y = \"Density\")"},{"path":"bayesian-inference.html","id":"session-info","chapter":"Week 1: Bayesian Inference","heading":"Session Info","text":"","code":"\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.1.2 (2021-11-01)\n#>  os       Ubuntu 20.04.3 LTS\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language (EN)\n#>  collate  C.UTF-8\n#>  ctype    C.UTF-8\n#>  tz       UTC\n#>  date     2022-01-09\n#>  pandoc   2.14.2 @ /usr/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package              * version    date (UTC) lib source\n#>  abind                  1.4-5      2016-07-21 [1] CRAN (R 4.1.2)\n#>  arrayhelpers           1.1-0      2020-02-04 [1] CRAN (R 4.1.2)\n#>  assertthat             0.2.1      2019-03-21 [1] CRAN (R 4.1.2)\n#>  backports              1.4.1      2021-12-13 [1] CRAN (R 4.1.2)\n#>  base64enc              0.1-3      2015-07-28 [1] CRAN (R 4.1.2)\n#>  bayesplot              1.8.1      2021-06-14 [1] CRAN (R 4.1.2)\n#>  bookdown               0.24       2021-09-02 [1] CRAN (R 4.1.2)\n#>  bridgesampling         1.1-2      2021-04-16 [1] CRAN (R 4.1.2)\n#>  brms                 * 2.16.3     2021-11-22 [1] CRAN (R 4.1.2)\n#>  Brobdingnag            1.2-6      2018-08-13 [1] CRAN (R 4.1.2)\n#>  broom                  0.7.11     2022-01-03 [1] CRAN (R 4.1.2)\n#>  bslib                  0.3.1      2021-10-06 [1] CRAN (R 4.1.2)\n#>  cachem                 1.0.6      2021-08-19 [1] CRAN (R 4.1.2)\n#>  callr                  3.7.0      2021-04-20 [1] CRAN (R 4.1.2)\n#>  cellranger             1.1.0      2016-07-27 [1] CRAN (R 4.1.2)\n#>  checkmate              2.0.0      2020-02-06 [1] CRAN (R 4.1.2)\n#>  cli                    3.1.0      2021-10-27 [1] CRAN (R 4.1.2)\n#>  cmdstanr             * 0.4.0.9001 2022-01-09 [1] Github (stan-dev/cmdstanr@a2a97d9)\n#>  coda                   0.19-4     2020-09-30 [1] CRAN (R 4.1.2)\n#>  codetools              0.2-18     2020-11-04 [2] CRAN (R 4.1.2)\n#>  colorspace             2.0-2      2021-06-24 [1] CRAN (R 4.1.2)\n#>  colourpicker           1.1.1      2021-10-04 [1] CRAN (R 4.1.2)\n#>  crayon                 1.4.2      2021-10-29 [1] CRAN (R 4.1.2)\n#>  crosstalk              1.2.0      2021-11-04 [1] CRAN (R 4.1.2)\n#>  DBI                    1.1.2      2021-12-20 [1] CRAN (R 4.1.2)\n#>  dbplyr                 2.1.1      2021-04-06 [1] CRAN (R 4.1.2)\n#>  digest                 0.6.29     2021-12-01 [1] CRAN (R 4.1.2)\n#>  distributional         0.3.0      2022-01-05 [1] CRAN (R 4.1.2)\n#>  downlit                0.4.0      2021-10-29 [1] CRAN (R 4.1.2)\n#>  dplyr                * 1.0.7      2021-06-18 [1] CRAN (R 4.1.2)\n#>  DT                     0.20       2021-11-15 [1] CRAN (R 4.1.2)\n#>  dygraphs               1.1.1.6    2018-07-11 [1] CRAN (R 4.1.2)\n#>  ellipsis               0.3.2      2021-04-29 [1] CRAN (R 4.1.2)\n#>  evaluate               0.14       2019-05-28 [1] CRAN (R 4.1.2)\n#>  extrafont              0.17       2014-12-08 [1] CRAN (R 4.1.2)\n#>  extrafontdb            1.0        2012-06-11 [1] CRAN (R 4.1.2)\n#>  fansi                  0.5.0      2021-05-25 [1] CRAN (R 4.1.2)\n#>  farver                 2.1.0      2021-02-28 [1] CRAN (R 4.1.2)\n#>  fastmap                1.1.0      2021-01-25 [1] CRAN (R 4.1.2)\n#>  forcats              * 0.5.1      2021-01-27 [1] CRAN (R 4.1.2)\n#>  fs                     1.5.2      2021-12-08 [1] CRAN (R 4.1.2)\n#>  gdtools                0.2.3      2021-01-06 [1] CRAN (R 4.1.2)\n#>  generics               0.1.1      2021-10-25 [1] CRAN (R 4.1.2)\n#>  ggdist                 3.0.1      2021-11-30 [1] CRAN (R 4.1.2)\n#>  ggplot2              * 3.3.5      2021-06-25 [1] CRAN (R 4.1.2)\n#>  ggridges               0.5.3      2021-01-08 [1] CRAN (R 4.1.2)\n#>  glue                 * 1.6.0      2021-12-17 [1] CRAN (R 4.1.2)\n#>  gridExtra              2.3        2017-09-09 [1] CRAN (R 4.1.2)\n#>  gtable                 0.3.0      2019-03-25 [1] CRAN (R 4.1.2)\n#>  gtools                 3.9.2      2021-06-06 [1] CRAN (R 4.1.2)\n#>  haven                  2.4.3      2021-08-04 [1] CRAN (R 4.1.2)\n#>  here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.1.2)\n#>  highr                  0.9        2021-04-16 [1] CRAN (R 4.1.2)\n#>  hms                    1.1.1      2021-09-26 [1] CRAN (R 4.1.2)\n#>  hrbrthemes           * 0.8.0      2020-03-06 [1] CRAN (R 4.1.2)\n#>  htmltools              0.5.2      2021-08-25 [1] CRAN (R 4.1.2)\n#>  htmlwidgets            1.5.4      2021-09-08 [1] CRAN (R 4.1.2)\n#>  httpuv                 1.6.5      2022-01-05 [1] CRAN (R 4.1.2)\n#>  httr                   1.4.2      2020-07-20 [1] CRAN (R 4.1.2)\n#>  igraph                 1.2.11     2022-01-04 [1] CRAN (R 4.1.2)\n#>  inline                 0.3.19     2021-05-31 [1] CRAN (R 4.1.2)\n#>  jquerylib              0.1.4      2021-04-26 [1] CRAN (R 4.1.2)\n#>  jsonlite               1.7.2      2020-12-09 [1] CRAN (R 4.1.2)\n#>  knitr                  1.37       2021-12-16 [1] CRAN (R 4.1.2)\n#>  labeling               0.4.2      2020-10-20 [1] CRAN (R 4.1.2)\n#>  later                  1.3.0      2021-08-18 [1] CRAN (R 4.1.2)\n#>  lattice                0.20-45    2021-09-22 [2] CRAN (R 4.1.2)\n#>  lifecycle              1.0.1      2021-09-24 [1] CRAN (R 4.1.2)\n#>  loo                  * 2.4.1      2020-12-09 [1] CRAN (R 4.1.2)\n#>  lubridate              1.8.0      2021-10-07 [1] CRAN (R 4.1.2)\n#>  magrittr               2.0.1      2020-11-17 [1] CRAN (R 4.1.2)\n#>  markdown               1.1        2019-08-07 [1] CRAN (R 4.1.2)\n#>  MASS                   7.3-54     2021-05-03 [2] CRAN (R 4.1.2)\n#>  Matrix                 1.3-4      2021-06-01 [2] CRAN (R 4.1.2)\n#>  matrixStats            0.61.0     2021-09-17 [1] CRAN (R 4.1.2)\n#>  memoise                2.0.1      2021-11-26 [1] CRAN (R 4.1.2)\n#>  mime                   0.12       2021-09-28 [1] CRAN (R 4.1.2)\n#>  miniUI                 0.1.1.1    2018-05-18 [1] CRAN (R 4.1.2)\n#>  modelr                 0.1.8      2020-05-19 [1] CRAN (R 4.1.2)\n#>  munsell                0.5.0      2018-06-12 [1] CRAN (R 4.1.2)\n#>  mvtnorm                1.1-3      2021-10-08 [1] CRAN (R 4.1.2)\n#>  nlme                   3.1-153    2021-09-07 [2] CRAN (R 4.1.2)\n#>  pillar                 1.6.4      2021-10-18 [1] CRAN (R 4.1.2)\n#>  pkgbuild               1.3.1      2021-12-20 [1] CRAN (R 4.1.2)\n#>  pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.1.2)\n#>  plyr                   1.8.6      2020-03-03 [1] CRAN (R 4.1.2)\n#>  posterior              1.2.0      2022-01-05 [1] CRAN (R 4.1.2)\n#>  prettyunits            1.1.1      2020-01-24 [1] CRAN (R 4.1.2)\n#>  processx               3.5.2      2021-04-30 [1] CRAN (R 4.1.2)\n#>  promises               1.2.0.1    2021-02-11 [1] CRAN (R 4.1.2)\n#>  ps                     1.6.0      2021-02-28 [1] CRAN (R 4.1.2)\n#>  purrr                * 0.3.4      2020-04-17 [1] CRAN (R 4.1.2)\n#>  R6                     2.5.1      2021-08-19 [1] CRAN (R 4.1.2)\n#>  ragg                   1.2.1      2021-12-06 [1] CRAN (R 4.1.2)\n#>  ratlas               * 0.0.0.9000 2022-01-06 [1] Github (atlas-aai/ratlas@267dd5c)\n#>  Rcpp                 * 1.0.7      2021-07-07 [1] CRAN (R 4.1.2)\n#>  RcppParallel           5.1.5      2022-01-05 [1] CRAN (R 4.1.2)\n#>  readr                * 2.1.1      2021-11-30 [1] CRAN (R 4.1.2)\n#>  readxl                 1.3.1      2019-03-13 [1] CRAN (R 4.1.2)\n#>  reprex                 2.0.1      2021-08-05 [1] CRAN (R 4.1.2)\n#>  reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.1.2)\n#>  rethinking           * 2.21       2022-01-06 [1] Github (rmcelreath/rethinking@783d111)\n#>  rlang                  0.4.12     2021-10-18 [1] CRAN (R 4.1.2)\n#>  rmarkdown              2.11       2021-09-14 [1] CRAN (R 4.1.2)\n#>  rprojroot              2.0.2      2020-11-15 [1] CRAN (R 4.1.2)\n#>  rsconnect              0.8.25     2021-11-19 [1] CRAN (R 4.1.2)\n#>  rstan                * 2.21.3     2021-12-19 [1] CRAN (R 4.1.2)\n#>  rstantools             2.1.1      2020-07-06 [1] CRAN (R 4.1.2)\n#>  Rttf2pt1               1.3.9      2021-07-22 [1] CRAN (R 4.1.2)\n#>  rvest                  1.0.2      2021-10-16 [1] CRAN (R 4.1.2)\n#>  sass                   0.4.0      2021-05-12 [1] CRAN (R 4.1.2)\n#>  scales                 1.1.1      2020-05-11 [1] CRAN (R 4.1.2)\n#>  sessioninfo            1.2.2      2021-12-06 [1] any (@1.2.2)\n#>  shape                  1.4.6      2021-05-19 [1] CRAN (R 4.1.2)\n#>  shiny                  1.7.1      2021-10-02 [1] CRAN (R 4.1.2)\n#>  shinyjs                2.1.0      2021-12-23 [1] CRAN (R 4.1.2)\n#>  shinystan              2.5.0      2018-05-01 [1] CRAN (R 4.1.2)\n#>  shinythemes            1.2.0      2021-01-25 [1] CRAN (R 4.1.2)\n#>  StanHeaders          * 2.21.0-7   2020-12-17 [1] CRAN (R 4.1.2)\n#>  stringi                1.7.6      2021-11-29 [1] CRAN (R 4.1.2)\n#>  stringr              * 1.4.0      2019-02-10 [1] CRAN (R 4.1.2)\n#>  svUnit                 1.0.6      2021-04-19 [1] CRAN (R 4.1.2)\n#>  systemfonts            1.0.3      2021-10-13 [1] CRAN (R 4.1.2)\n#>  tensorA                0.36.2     2020-11-19 [1] CRAN (R 4.1.2)\n#>  textshaping            0.3.6      2021-10-13 [1] CRAN (R 4.1.2)\n#>  threejs                0.3.3      2020-01-21 [1] CRAN (R 4.1.2)\n#>  tibble               * 3.1.6      2021-11-07 [1] CRAN (R 4.1.2)\n#>  tidybayes            * 3.0.2      2022-01-05 [1] CRAN (R 4.1.2)\n#>  tidybayes.rethinking * 3.0.0      2022-01-06 [1] Github (mjskay/tidybayes.rethinking@7da9946)\n#>  tidyr                * 1.1.4      2021-09-27 [1] CRAN (R 4.1.2)\n#>  tidyselect             1.1.1      2021-04-30 [1] CRAN (R 4.1.2)\n#>  tidyverse            * 1.3.1      2021-04-15 [1] CRAN (R 4.1.2)\n#>  tzdb                   0.2.0      2021-10-27 [1] CRAN (R 4.1.2)\n#>  utf8                   1.2.2      2021-07-24 [1] CRAN (R 4.1.2)\n#>  vctrs                  0.3.8      2021-04-29 [1] CRAN (R 4.1.2)\n#>  withr                  2.4.3      2021-11-30 [1] CRAN (R 4.1.2)\n#>  xfun                   0.29       2021-12-14 [1] CRAN (R 4.1.2)\n#>  xml2                   1.3.3      2021-11-30 [1] CRAN (R 4.1.2)\n#>  xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.1.2)\n#>  xts                    0.12.1     2020-09-09 [1] CRAN (R 4.1.2)\n#>  yaml                   2.2.1      2020-02-01 [1] CRAN (R 4.1.2)\n#>  zoo                    1.8-9      2021-03-09 [1] CRAN (R 4.1.2)\n#> \n#>  [1] /home/runner/work/_temp/Library\n#>  [2] /opt/R/4.1.2/lib/R/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
